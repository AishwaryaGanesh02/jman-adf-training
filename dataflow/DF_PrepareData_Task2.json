{
	"name": "DF_PrepareData_Task2",
	"properties": {
		"folder": {
			"name": "AdfMiniProject"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_sql_db_training",
						"type": "LinkedServiceReference"
					},
					"name": "getCategories",
					"description": "Import category data from SQL"
				},
				{
					"linkedService": {
						"referenceName": "LS_sql_db_training",
						"type": "LinkedServiceReference"
					},
					"name": "getProducts",
					"description": "Import product data from SQL"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_sql_db_training",
						"type": "LinkedServiceReference"
					},
					"name": "storeCatogoryData",
					"description": "Store cleaned data in DB"
				},
				{
					"name": "storeProductData",
					"description": "Store cleaned data in DB"
				}
			],
			"transformations": [
				{
					"name": "removeNullValues",
					"description": "Removing NULL values"
				},
				{
					"name": "castDataType"
				},
				{
					"name": "selectRequiredCols",
					"description": "Select the required data"
				}
			],
			"scriptLines": [
				"source(output(",
				"          product_category as string,",
				"          category as string,",
				"          subcategory as string,",
				"          category_code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'raw',",
				"     tableName: 'categories',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getCategories",
				"source(output(",
				"          id as string,",
				"          department_code as string,",
				"          category_code as string,",
				"          category_name as string,",
				"          search_category_code as string,",
				"          series_code as string,",
				"          series_name as string,",
				"          brand_code as string,",
				"          brand_url_code as string,",
				"          brand_name as string,",
				"          min_standard_days_to_ship as string,",
				"          max_standard_days_to_ship as string,",
				"          direct_cart_type as string,",
				"          price_check_less_flag as string,",
				"          min_standard_unit_price as string,",
				"          max_standard_unit_price as string,",
				"          min_price_per_piece as string,",
				"          max_price_per_piece as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'raw',",
				"     tableName: 'products',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getProducts",
				"castDataType derive(min_price_per_piece = iifNull(min_price_per_piece, 0.0),",
				"          max_price_per_piece = iifNull(max_price_per_piece, 0.0),",
				"          min_standard_unit_price = iifNull(min_standard_unit_price, 0.0),",
				"          max_standard_unit_price = iifNull(max_standard_unit_price, 0.0)) ~> removeNullValues",
				"getProducts cast(output(",
				"          id as integer,",
				"          series_code as long,",
				"          brand_code as string,",
				"          brand_url_code as string,",
				"          brand_name as string,",
				"          min_standard_days_to_ship as integer,",
				"          max_standard_days_to_ship as integer,",
				"          direct_cart_type as string,",
				"          price_check_less_flag as integer,",
				"          min_standard_unit_price as double,",
				"          max_standard_unit_price as double,",
				"          min_price_per_piece as double,",
				"          max_price_per_piece as double",
				"     ),",
				"     errors: true) ~> castDataType",
				"removeNullValues select(mapColumn(",
				"          department_code,",
				"          category_code,",
				"          category_name,",
				"          series_code,",
				"          series_name,",
				"          brand_code,",
				"          brand_name,",
				"          min_standard_days_to_ship,",
				"          max_standard_days_to_ship,",
				"          min_standard_unit_price,",
				"          max_standard_unit_price,",
				"          min_price_per_piece,",
				"          max_price_per_piece",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredCols",
				"getCategories sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'catogories',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> storeCatogoryData",
				"selectRequiredCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> storeProductData"
			]
		}
	}
}